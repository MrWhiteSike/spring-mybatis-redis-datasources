<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
     <!-- class annotation related... start -->
    <context:component-scan base-package="com.bsk"/>   
<!-- 	<context:component-scan base-package="com.bsk.service" /> -->
<!-- 	<context:component-scan base-package="com.bsk.service.*" /> -->
<!-- 	<context:component-scan base-package="com.bsk.cache.redis" /> -->
	<!-- class annotation related... end -->
	<context:annotation-config />
	
    <!-- mybatis related... start -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
			</list>
		</property>
	</bean>
<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource " -->
<!-- 		destroy-method="close"> -->
<!-- 		<property name="driverClass" value="com.mysql.jdbc.Driver" /> -->
<!-- 		<property name="jdbcUrl" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database}?characterEncoding=utf8" /> -->
<!-- 		<property name="user" value="${jdbc.username}" /> -->
<!-- 		<property name="password" value="${jdbc.password}" /> -->
<!-- 		<property name="acquireIncrement" value="1" /> -->
<!-- 		<property name="initialPoolSize" value="5" /> -->
<!-- 		<property name="maxPoolSize" value="20" /> -->
<!-- 		<property name="minPoolSize" value="5" /> -->
<!-- 		<property name="maxStatements" value="100" /> -->
<!-- 		<property name="testConnectionOnCheckout" value="true" /> -->
<!-- 	</bean> -->
	<bean id="ssm1DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource "
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database}?characterEncoding=utf8" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="acquireIncrement" value="1" />
		<property name="initialPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="minPoolSize" value="5" />
		<property name="maxStatements" value="100" />
		<property name="testConnectionOnCheckout" value="true" />
	</bean>
	<bean id="ssm2DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource "
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database2}?characterEncoding=utf8" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="acquireIncrement" value="1" />
		<property name="initialPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="minPoolSize" value="5" />
		<property name="maxStatements" value="100" />
		<property name="testConnectionOnCheckout" value="true" />
	</bean>
	<bean id="dataSource" class="com.bsk.util.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="ssm1DataSource" value-ref="ssm1DataSource"></entry>
				<entry key="ssm2DataSource" value-ref="ssm2DataSource"></entry>
			</map>
		</property>
		<!-- 默认数据源 -->
		<property name="defaultTargetDataSource" ref="ssm1DataSource"/>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/classes/mybatis-config.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bsk.mapper"/>
    </bean>
    <!-- mybatis related... end -->
 
	<!-- transaction config related... start -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启注解式事务支持 -->
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
	<!-- transaction config related... end -->
	
	<!-- shiro start -->
	<!-- 配置自定义Realm -->
	<bean id="myRealm" class="com.bsk.shiro.MyRealm" />
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"></property>
	</bean>
	<!-- Shiro 过滤器 核心 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/nopower.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!--anon 表示匿名访问，不需要认证以及授权-->
                /loginAdmin=anon
                /websocket=anon
                <!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
                /admin*=authc
                /student=roles[teacher]
                /teacher=perms["user:create"]
            </value>
        </property>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
	<!-- shiro end -->
	
	<!-- cxf start -->
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	
<!--        自动扫描webService  -->
    <context:component-scan base-package="com.bsk.cxf" />
<!--        定义webservice的发布接口 -->
    <jaxws:endpoint
            implementor="#helloWorld"
            address="/HelloWorld"
    ></jaxws:endpoint>
	<!-- cxf end -->
	
	<!-- redis  config  start -->
	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	
	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="port" value="${redis.port}"/>
		<property name="password" value="${redis.pass}"/>
		<property name="database" value="${redis.dbIndex}"/>
		<property name="poolConfig" ref="poolConfig"/>
	</bean>
	
	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"/>
	</bean>
	
	<!-- 配置RedisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
	     <constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="defaultExpiration" value="${redis.expiration}"/>
	</bean>
	
	<!-- 配置RedisCacheConfig -->
	<bean id="redisCacheConfig" class="com.bsk.cache.redis.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean>
	
	<!-- redis  config  end -->
	
	<!-- 动态切换数据源 start-->
	<bean id="dataSourceExchange" class="com.bsk.util.DataSourceExchange"></bean>
	<!-- aop:配置切面拦截方法 end -->
	<aop:config proxy-target-class="false">
		<!--所有数据库操作的方法加入切面-->
		<aop:aspect ref="dataSourceExchange" order="1">
			<aop:pointcut id="dataSourcePointcut" expression="execution(* com.bsk.service.*.*.*(..))"/>
			<aop:before pointcut-ref="dataSourcePointcut" method="doBefore"/>
			<aop:after pointcut-ref="dataSourcePointcut" method="doAfter"/>
		</aop:aspect>
	</aop:config>
	<!-- 动态切换数据源 end-->
	
</beans>